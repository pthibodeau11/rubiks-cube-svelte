{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../App.svelte",
    "../Nav.svelte",
    "../Steps.svelte",
    "../App2.svelte",
    "../Controls.svelte",
    "../Laps.svelte",
    "../Stopwatch.svelte"
  ],
  "sourcesContent": [
    "<script>\n\texport let name;\n\timport Nav from './Nav.svelte';\n\timport Steps from './Steps.svelte';\n\timport Timer from './Timer/App2.svelte'\n\tlet page\n\n</script>\n\n\n<Nav bind:page/>\n{#if page === 'Home'}\n<main>\n\t<Steps />\n</main>\n{:else if page === 'Timer'}\n<main>\n\t<Timer />\n</main>\n{/if}\n\n\n<style>\n\tmain {\n\t\ttext-align: center;\n\t\tpadding: 1em;\n\t\tmax-width: 240px;\n\t\tmargin: 0 auto;\n\t\tdisplay: flex;\n\t\tflex-direction: row;\n\t}\n\n\th1 {\n\t\tcolor: #ff3e00;\n\t\ttext-transform: uppercase;\n\t\tfont-size: 4em;\n\t\tfont-weight: 100;\n\t}\n\n\t@media (min-width: 640px) {\n\t\tmain {\n\t\t\tmax-width: none;\n\t\t}\n\t}\n</style>",
    "<script>\n    let src = './images/rubik_gif.gif';\n    export let page = 'Home'\n    function setPage(i) {\n\t\tpage = i\n\t} \n</script>\n\n<div\n    class=\"NavBar\"\n>\n    <div\n        class=\"TitleContainer\"\n    >\n        <img {src} alt=\"rubik gif\">\n        <div\n            class=\"Title\"\n        >\n            <h4>Guide:</h4>\n            <h1>How to Solve a Rubik's Cube</h1>\n        </div>\n    </div>\n    <div\n        class=\"NavLinks\"\n    >\n        <li on:click=\"{() => setPage('Home')}\">Home</li>\n        <li on:click=\"{() => setPage('Timer')}\">Timer</li>\n        <li>Purchase Cube</li>\n    </div>\n</div>\n\n\n<style>\n    .NavBar {\n        height: 125px;\n        display: flex;\n        flex-direction: row;\n        justify-content: space-between;\n        font-family: 'Helvetica Neue';\n        position: fixed;\n        top: 0;\n        width: 100%;\n        z-index: 10000;\n        background-color: white;\n        margin-top: -8px;\n    }\n    .NavLinks {\n        /* height: 400px; */\n        display: flex;\n        flex-direction: row;\n        margin-right: 50px;\n        margin-top: 25px;\n        font-family: 'Helvetica Neue';\n        font-size: 16px;\n        margin-bottom: 80px;\n    }\n    .TitleContainer {\n        display: flex;\n        flex-direction: row;\n    }\n    .Title {\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n        margin-top: 18px;\n    }\n\n    h1 {\n        margin: 0;\n        font-size: 28px;\n        font-family: 'Helvetica Neue';\n\n    }\n\n    h4 {\n        margin: 0;\n        font-weight: normal;\n        font-family: 'Helvetica Neue';\n\n    }\n\n    li {\n        list-style-type: none;\n        padding-right: 12px;\n        margin-left: 25px;\n        font-family: 'Helvetica Neue';\n        cursor: pointer;\n    }\n\n    li:hover{\n        color: #E1494A\n    }\n\n    img {\n        height: 200px;\n        margin-left: -50px;\n        margin-top: -25px;\n        margin-right: -50px;\n    }\n\n</style>\n\n",
    "<script>\n    export let steps;\n\t\n\tfunction step(i = 0) {\n\t\tsteps.children[i-1].scrollIntoView({ behavior: 'smooth', block: 'start' });\n\t\t//console.log(offset);\n    }\n    import Youtube from \"@sveltecasts/svelte-youtube\";\n    let daisy = './images/daisy.png';\n    let secondLayerStuck = \"./images/second_layer_stuck.png\";\n    let secondLayer = \"./images/second_layer.png\";\n    let whiteBottomLeft = \"./images/white_bottom_left_corner.png\";\n    let whiteBottomRow = \"./images/white_bottom_row_corner.png\";\n    let whiteCross = \"./images/white_cross.png\";\n    let whiteTopCorner = \"./images/white_top_corner.png\";\n    let whiteTopFaceCorner = \"./images/white_top_face_corner.png\";\n    let yellowCrossComplete = \"./images/yellow_cross_complete.png\";\n    let yellowCrossL = \"./images/yellow_cross_l.png\";\n    let yellowCrossNoEdge = \"./images/yellow_cross_no_edge.png\";\n    let yellowCrossStraightLine = \"./images/yellow_cross_straight_line.png\";\n    let yellowFaceFish = \"./images/yellow_face_fish.png\";\n    let yellowFaceNoFish = \"./images/yellow_face_no_fish.png\";\n    let cornersNoMatching = \"./images/corners_no_matching.png\"\n    let cornersMatching = \"./images/corners_matching.png\";\n    let finalSolved = \"./images/final_solved.png\"\n</script>\n\n<main>\n\t<section\n\t\tclass=\"left\"\n\t>\n\t\t<ul>\n            <li on:click=\"{() => step(1)}\">01. Get to know your Rubik's Cube</li>\n            <li on:click=\"{() => step(2)}\">02. Make the Daisy</li>\n            <li on:click=\"{() => step(3)}\">03. Create the White Cross</li>\n            <li on:click=\"{() => step(4)}\">04. Solve the Bottom Layer</li>\n            <li on:click=\"{() => step(5)}\">05. Solve the Second Layer</li>\n            <li on:click=\"{() => step(6)}\">06. Create the Yellow Cross</li>\n            <li on:click=\"{() => step(7)}\">07. Solve the Yellow Face</li>\n            <li on:click=\"{() => step(8)}\">08. Position the Corners</li>\n            <li on:click=\"{() => step(9)}\">09. Position the Final Edges</li>\n        </ul>\n\t</section>\n\t<section\n\t\tclass=\"right\"\n\t>\n        <div class=\"steps\">\n\t        <div class=\"track\" bind:this=\"{steps}\">\n                <div class=\"step1\">\n                    <div\n                        class=\"headerContainer1\"\n                    >\n                        <div\n                            class=\"number\"\n                        >\n                            01\n                        </div>\n                        <div\n                            class=\"text\"\n                        >\n                            Get to know your Rubik's Cube\n                        </div>\n                    </div>\n                    <div\n                        class=\"middle1\"\n                    >\n                        <Youtube videoId=\"R-R0KrXvWbc\" />\n                    </div>\n                    <div\n                        class=\"bottom1\"\n                    >\n                        <p>This video provides a step-by-step tutorial for solving the Rubik's Cube. Also included is a basic understanding of the Rubik's Cube that will set you up nicely for this guide.</p>\n                    </div>\n                </div>\n                <div class=\"step2\">\n                    <div\n                        class=\"headerContainer\"\n                    >\n                        <div\n                            class=\"number\"\n                        >\n                            02\n                        </div>\n                        <div\n                            class=\"text\"\n                        >\n                            Make the Daisy\n                        </div>\n                    </div>\n                    <div\n                        class=\"middle2\"\n                    >\n                        <div\n                            class=\"middle2text\"\n                        >\n                            <p>For this step, simply do whatever you need to get the middle white square to be surrounded by 4 yellow stickers on each edge.</p>\n                        </div>\n                        <img src={daisy} alt=\"daisy goes here\" >\n                    </div>\n                    <div\n                        class=\"bottom2\"\n                    >\n                    </div>\n                </div>\n                <div class=\"step3\">\n                    <div\n                        class=\"headerContainer\"\n                    >\n                        <div\n                            class=\"number\"\n                        >\n                            03\n                        </div>\n                        <div\n                            class=\"text\"\n                        >\n                            Create the White Cross\n                        </div>\n                    </div>\n                    <div\n                        class=\"middle2\"\n                    >\n                        <div\n                            class=\"middle2text\"\n                        >\n                            <p>Align each white edge piece (on the top of the cube) so it’s adjacent color is matched to the color in the middle of each side.</p>\n                            <p style=\"font-style: italic;\">In this example above, on the right side red is already matched to the red in the middle of that side. However, on the left side, the orange is not – it’s matched to blue. </p>\n                            <p style=\"padding-top: 10px;\">If the colors are matched, turn the face of that side 2 times.</p>\n                            <p>If the colors are not matched, rotate the top until they do match. When they match, turn that side 2 times.</p>\n                            <p>Repeat this for each white edge piece</p>\n                        </div>\n                        <img src={whiteCross} alt=\"daisy goes here\" >\n                    </div>\n                    <div\n                        class=\"bottom2\"\n                    >\n                            <p>If done correctly, you should have a white cross on the bottom and each white edges’ adjacent color will be matched properly to the middle color on each side</p>\n                    </div>\n                </div>\n                <div class=\"step4\">\n                    <div\n                        class=\"headerContainer\"\n                    >\n                        <div\n                            class=\"number\"\n                        >\n                            04\n                        </div>\n                        <div\n                            class=\"text\"\n                        >\n                            Solve the Bottom Layer\n                        </div>\n                    </div>\n                            <p>Start by flipping the cube over so that the yellow middle sticker is point up. You will keep the yellow sticker pointing up for the remainder of the solve.</p>\n                    <div\n                        class=\"middle4\"\n                    >\n                        <div\n                            class=\"middle4text\"\n                        >\n                            <p style=\"text-decoration: underline\"> WHITE STICKER(s) ON TOP ROW CORNER</p>\n                            <p>First, look for white stickers on the top layer facing outward. When found, rotate the top row (if necessary) so that its right adjacent sticker is matched to the color of that side. </p>\n                            <p>Perform the <span style=\"font-weight: bold\">LEFT TRIGGER</span> move since the white/red sticker is to the top/left of the red middle sticker. </p>\n                            <p>If the red sticker was to the top/right of red middle sticker, perform the <span style=\"font-weight: bold\">RIGHT TRIGGER </span> move.</p>\n                            <p>Repeat this for all the top row corner pieces</p>\n                        </div>\n                        <img src={whiteTopCorner} alt=\"top white goes here\" >\n                    </div>\n                    <div\n                        class=\"middle4\"\n                    >\n                        <div\n                            class=\"middle4text\"\n                        >\n                            <p style=\"text-decoration: underline\"> WHITE STICKER(s) ON THE TOP FACE CORNER</p>\n                            <p>First, check to make that the white stick on top is directly above an empty white spot on the bottom of the cube. If it’s not, rotate the top row so that it is. </p>\n                            <p>Once aligned above an empty white spot, perform either the  <span style=\"font-weight: bold\">RIGHT or LEFT TRIGGER</span> move (depending on how you’re holding the cube) – just make sure your starting the trigger move on the side with the white sticker.</p>\n                            <p>After you’ve done the trigger move twice. You should now have a white sticker on the top row on a side corner. With that in place, perform the steps when you have a white sticker on the top row on a side corner.</p>\n                        </div>\n                        <img src={whiteTopFaceCorner} alt=\"top white face goes here\" >\n                    </div>\n                    <div\n                        class=\"middle4\"\n                    >\n                        <div\n                            class=\"middle4text\"\n                        >\n                            <p style=\"text-decoration: underline\"> WHITE STICKER(s) ON BOTTOM ROW CORNER</p>\n                            <p>If the white sticker is on a bottom right corner, perform the <span style=\"font-weight: bold\"> RIGHT TRIGGER</span> </p>\n                        </div>\n                        <img src={whiteBottomRow} alt=\"white cross goes here\" >\n                    </div>\n                    <div\n                        class=\"middle4\"\n                    >\n                        <div\n                            class=\"middle4text\"\n                        >\n                            <p>If the white sticker is on a bottom left corner, perform the <span style=\"font-weight: bold\"> LEFT TRIGGER</span> </p>\n                        </div>\n                        <img src={whiteBottomLeft} alt=\"white cross goes here\" >\n                    </div>\n                    <div\n                        class=\"bottom4\"\n                    >\n                            <p>After performing either one of the previous moves, there will now be a white sticker on the top face. As such, perform the step above for <span style=\"text-decoration: underline\">WHITE STICKERS ON TOP FACE CORNER</span></p>\n                    </div>\n                </div>\n                <div class=\"step5\">\n                    <div\n                        class=\"headerContainer\"\n                    >\n                        <div\n                            class=\"number\"\n                        >\n                            05\n                        </div>\n                        <div\n                            class=\"text\"\n                        >\n                            Solve the Second Layer\n                        </div>\n                    </div>\n                        <p>At this point you should now have a completely white bottom and the first layer solved. For this step, you should be focusing on top row and the top face edge pieces. </p>\n                    <div\n                        class=\"middle5\"\n                    >\n                        <div\n                            class=\"middle5text\"\n                        >\n                            <p>First, look for a top edge piece and its corresponding adjacent color that does NOT have a yellow sticker. For example, in the picture below, look for orange/green combo, green/red, or orange/blue.</p>\n                            <p>When found, rotate the top row so that the top row middle face color matches to the color in the middle of the face.</p>\n                            <!-- <p></p>\n                            <p></p>\n                            <p></p> -->\n                        </div>\n                        <img src={secondLayer} alt=\"white cross goes here\" >\n                    </div>\n                    <div\n                        class=\"middle5\"\n                    >\n                        <div\n                            class=\"middle5text\"\n                        >\n                            <p>Next, look at the color of the sticker on the top face (in this example, orange). Since orange is the right face, you’ll first <span style=\"font-weight: bold\">rotate the top row clockwise 1x</span> and then perform the<span style=\"font-weight: bold\">RIGHT TRIGGER</span> move.</p>\n                            <p>Then, perform the move when <span style=\"text-decoration: underline\">WHITE STICKER ON TOP ROW CORNER</span></p>\n                            <p style=\"font-style: italic\">**Note: if the color of the sticker on the top face was on the left face, then you would rotate the top row counter-clockwise 1x and then perform the LEFT TRIGGER move </p>\n                            <p>Continue to repeat until either A) All top row edge piece color combinations include a yellow sticker or B) the 2nd row is solved.</p>\n                            <p>IF… A). all top row edge piece color combinations include a yellow sticker (see below), then you’ll need to perform either the <span style=\"font-weight: bold\"> RIGHT TRIGGER or LEFT TRIGGER </span>on a side with a missing 2nd row piece. After you perform the trigger move, it should allow you perform the previous moves in this step to complete the 2nd row.</p>\n                        </div>\n                        <img src={secondLayerStuck} alt=\"white cross goes here\" >\n                    </div>\n                    <div\n                        class=\"bottom5\"\n                    >\n                            <p></p>\n                    </div>\n                </div>\n                <div class=\"step6\">\n                    <div\n                        class=\"headerContainer\"\n                    >\n                        <div\n                            class=\"number\"\n                        >\n                            06\n                        </div>\n                        <div\n                            class=\"text\"\n                        >\n                            Create the Yellow Cross\n                        </div>\n                    </div>\n                        <p>When you get this step, you may have 1 of the following scenarios</p>\n                    <div\n                        class=\"middle6\"\n                    >\n                        <div\n                            class=\"middle6text\"\n                        >\n                            <p style=\"text-decoration: underline\">A) No Yellow edge pieces on top</p>\n                            <p style=\"font-weight: bold\"> F U R U’ R’ F’</p>\n                            <p></p>\n                            <p></p>\n                        </div>\n                        <img src={yellowCrossNoEdge} alt=\"yellow cross no edge goes here\" >\n                    </div>\n                    <div\n                        class=\"middle6\"\n                    >\n                        <div\n                            class=\"middle6text\"\n                        >\n                            <p style=\"text-decoration: underline\">B) Two yellow edges pieces that form a straight line</p>\n                            <p>Turn the top row (if necessary) so that it forms a straight line - from your perspective. Then...</p>\n                            <p style=\"font-weight: bold\"> F U R U’ R’ F’</p>\n                            <p></p>\n                            <p></p>\n                        </div>\n                        <img src={yellowCrossStraightLine} alt=\"yellow cross straight goes here\" >\n                    </div>\n                    <div\n                        class=\"middle6\"\n                    >\n                        <div\n                            class=\"middle6text\"\n                        >\n                            <p style=\"text-decoration: underline\">C) Two edge pieces that form an L</p>\n                            <p>Rotate the top row (if necessary) so that the edge pieces are at 12 and 9 - from your perspective</p>\n                            <p style=\"font-weight: bold\"> F U R U’ R’ F’</p>\n                            <p></p>\n                            <p></p>\n                        </div>\n                        <img src={yellowCrossL} alt=\"yellow cross L goes here\" >\n                    </div>\n                    <p>** Continue to repeat until you have a yellow cross on top</p>\n                    <div\n                        class=\"middle6\"\n                    >\n                        <div\n                            class=\"middle6text\"\n                        >\n                            <p></p>\n                            <p></p>\n                            <p></p>\n                            <p></p>\n                            <p></p>\n                        </div>\n                        <img src={yellowCrossComplete} alt=\"yellow cross complete goes here\" >\n                    </div>\n                    <div\n                        class=\"bottom6\"\n                    >\n                            <p>Note… you may have extra yellow corner pieces (this is okay – repeat steps above until you have a yellow cross).</p>\n                    </div>\n                </div>\n                <div class=\"step7\">\n                    <div\n                        class=\"headerContainer\"\n                    >\n                        <div\n                            class=\"number\"\n                        >\n                            07\n                        </div>\n                        <div\n                            class=\"text\"\n                        >\n                            Solve the Yellow Face\n                        </div>\n                    </div>\n                    <p>Once you have a yellow cross, inspect the top face.</p>\n                    <div\n                        class=\"middle7\"\n                    >\n                        <div\n                            class=\"middle7text\"\n                        >\n                            <p style=\"text-decoration: underline\">Fish Pattern</p>\n                            <p>If there are three empty corners on the top face, it will look like a “fish” pattern. If you have the fish pattern, rotate the top so that the mouth is down and to the left. </p>\n                            <p>Then, perform this algorithm</p>\n                            <p style=\"font-weight: bold\"> R U R' U R U2 R'</p>\n                        </div>\n                        <img src={yellowFaceFish} alt=\"yellow face goes here\" >\n                    </div>\n                    <div\n                        class=\"middle7\"\n                    >\n                        <div\n                            class=\"middle7text\"\n                        >\n                            <p style=\"text-decoration: underline\">No Fish Pattern</p>\n                            <p>If you have zero or two yellow corner stickers, rotate the top of the cube so that you have a yellow sticker in the upper right corner of the left face. </p>\n                            <p>Then, perform this algorithm</p>\n                            <p style=\"font-weight: bold\"> R U R' U R U2 R'</p>\n                        </div>\n                        <img src={yellowFaceNoFish} alt=\"yellow no fish face goes here\" >\n                    </div>\n                    <div\n                        class=\"bottom7\"\n                    >\n                            <p>Note: You may need to repeat the “fish” pattern 2x</p>\n                    </div>\n                </div>\n                <div class=\"step8\">\n                    <div\n                        class=\"headerContainer\"\n                    >\n                        <div\n                            class=\"number\"\n                        >\n                            08\n                        </div>\n                        <div\n                            class=\"text\"\n                        >\n                            Position the Corners\n                        </div>\n                    </div>\n                    <p>At this point, you should have a fully completed top yellow face. Now, the goal of this step is to have one side with matching top corner stickers. </p>\n                    <div\n                        class=\"middle8\"\n                    >\n                        <div\n                            class=\"middle8text\"\n                        >\n                            <p>If there are no matching top corner pieces...</p>\n                            <p>Perform this algorithm</p>\n                            <p style=\"font-weight: bold\"> L’ U R U’ L U R’ R U R’ U R U2 R’</p>\n                            <p></p>\n                        </div>\n                        <img src={cornersNoMatching} alt=\"corner positions goes here\" >\n                    </div>\n                    <div\n                        class=\"middle8\"\n                    >\n                        <div\n                            class=\"middle8text\"\n                        >\n                            <p>If there is a side that has matching corner colors, rotate the top layer so that it is aligned with the corresponding face and position it so that face is in your left hand. </p>\n                            <p>Then, perform the same algorithm</p>\n                            <p style=\"font-weight: bold\"> L’ U R U’ L U R’ R U R’ U R U2 R’</p>\n                            <p></p>\n                        </div>\n                        <img src={cornersMatching} alt=\"corner positions goes here\" >\n                    </div>\n                    <div\n                        class=\"bottom8\"\n                    >\n                            <p></p>\n                    </div>\n                </div>\n                <div class=\"step9\">\n                    <div\n                        class=\"headerContainer\"\n                    >\n                        <div\n                            class=\"number\"\n                        >\n                            09\n                        </div>\n                        <div\n                            class=\"text\"\n                        >\n                            Position the Final Edges\n                        </div>\n                    </div>\n                    <div\n                        class=\"middle9\"\n                    >\n                        <div\n                            class=\"middle9text\"\n                        >\n                            <p>If one of the sides is completely solved, face that side away and perform the appropriate pattern:</p>\n                            <br/>\n                            <p style=\"text-decoration: underline\">Swap top middle edges in clockerwise manner:</p>\n                            <p style=\"font-weight: bold\">F2 U R’ L F2 L’ R U F2</p>\n                            <br/>\n                            <p style=\"text-decoration: underline\">Swap top middle edges in counter-clockwise manner:</p>\n                            <p style=\"font-weight: bold\">F2 U’ R’ L F2 L’ R U’ F2</p>\n                            <br/>\n                            <p>If none of the sides are solved, perform the counter clockwise algorithm once, reposition and then perform the appropriate clockwise or counter-clockwise algorithm.</p>\n                        </div>\n                    </div>\n                    <div\n                        class=\"bottom9\"\n                    >\n                        <img src={finalSolved} alt=\"final positions goes here\" >\n                            <p>Congratulations! You just solved the Rubik’s Cube!</p>\n                    </div>\n                </div>\n\t        </div>\n        </div>\n\t</section>\n</main>\n\n\n<style>\n\n    main {\n\t\ttext-align: center;\n\t\tpadding: 1em;\n\t\twidth: 100%;\n\t\tmargin: 0 auto;\n\t\tdisplay: flex;\n\t\tflex-direction: row;\n\t}\n\t.left {\n        width: 340px;\n        margin-top: 100px;\n\t}\n\n\t.right {\n        width: 100%;\n        /* margin-top: 100px; */\n        margin-left: 45px;\n        margin-right: 45px;\n    }\n    \n    .track {\n        margin-left: 28px;\n    }\n\n    img {\n        margin-bottom: 50px;\n        margin-top: 25px;\n    }\n\n    ul {\n        list-style: none;\n        font-family: 'Helvetica Neue';\n        text-align: left;\n        margin-top: 50px;\n        padding-left: 0;\n        position: fixed;\n        border-spacing: 0;\n        /* cursor: pointer !important; */\n    }\n    li {\n        list-style: none;                \n        font-family: 'Helvetica Neue';\n        margin-bottom: 35px;\n        cursor: pointer !important;\n        border-spacing: 0;\n    }\n\n    li:hover {\n        /* font-weight: bold; */\n        color: #E1494A\n    }\n\n    .headerContainer1{\n        display: flex;\n        flex-direction: column;\n        align-items: flex-start;\n        margin-top: 130px;\n    }\n    .headerContainer{\n        display: flex;\n        flex-direction: column;\n        align-items: flex-start;\n        margin-top: 107px;\n    }\n\n    .number {\n        font-size: 60px;\n        font-family: 'Helvetica Neue';\n        color: lightgrey;\n        font-size: 76px;\n        color: lightgrey;\n        font-weight: bolder;\n    }\n\n    .text {\n        margin-left: 37px;\n        margin-bottom: 20px;\n        margin-top: -37px;\n        position: relative;\n        font-size: 40px;\n        font-weight: normal;\n    }\n\n    .step1 {\n        min-height: 250px;\n        font-family: 'Helvetica Neue';\n        display: flex;\n        flex-direction: column;\n    }\n    .middle1 {\n        display: flex;\n        flex-direction: row;\n        justify-content: center;\n        align-items: center;\n    }\n    .bottom1 {\n        padding-top: 25px;\n        margin-bottom: 25px;\n    }\n    .step2 {\n        min-height: 250px;\n        font-family: 'Helvetica Neue';\n        display: flex;\n        flex-direction: column;\n    }\n    \n    .middle2 {\n        display: flex;\n        flex-direction: row;\n        align-items: center;\n        justify-content: space-between;\n    }\n    .middle2text {\n        max-width: 58%;\n        text-align: justify;\n    }\n    .bottom2 {\n        margin-bottom: 25px;\n    }\n    .step3 {\n        min-height: 250px;\n        font-family: 'Helvetica Neue';\n        display: flex;\n        flex-direction: column;\n\n    }\n    .middle3 {\n        display: flex;\n        flex-direction: row;\n        align-items: center;\n        justify-content: space-between;\n    }\n    .middle3text {\n        max-width: 58%;\n        text-align: justify;\n    }\n    .bottom3 {\n        margin-bottom: 25px;\n    }\n    .step4 {\n        min-height: 250px;\n        font-family: 'Helvetica Neue';\n        display: flex;\n        flex-direction: column;\n\n    }\n    .middle4 {\n        display: flex;\n        flex-direction: row;\n        align-items: center;\n        justify-content: space-between;\n    }\n    .middle4text {\n        max-width: 58%;\n        text-align: justify;\n    }\n    .bottom4 {\n        margin-bottom: 25px;\n    }\n    .step5 {\n        min-height: 250px;\n        font-family: 'Helvetica Neue';\n        display: flex;\n        flex-direction: column;\n        \n    }\n    .middle5 {\n        display: flex;\n        flex-direction: row;\n        align-items: center;\n        justify-content: space-between;\n    }\n    .middle5text {\n        max-width: 58%;\n        text-align: justify;\n    }\n    .bottom5 {\n        margin-bottom: 25px;\n    }\n    .step6 {\n        min-height: 250px;\n        font-family: 'Helvetica Neue';\n        display: flex;\n        flex-direction: column;\n    }\n    .middle6 {\n        display: flex;\n        flex-direction: row;\n        align-items: center;\n        justify-content: space-between;\n    }\n    .middle6text {\n        max-width: 58%;\n        text-align: justify;\n    }\n    .bottom6 {\n        margin-bottom: 25px;\n    }\n    .step7 {\n        min-height: 250px;\n        font-family: 'Helvetica Neue';\n        display: flex;\n        flex-direction: column;\n    }\n    .middle7{\n        display: flex;\n        flex-direction: row;\n        align-items: center;\n        justify-content: space-between;\n    }\n    .middle7text {\n        max-width: 58%;\n        text-align: justify;\n    }\n    .bottom7 {\n        margin-bottom: 25px;\n    }\n    .step8 {\n        min-height: 250px;\n        font-family: 'Helvetica Neue';\n        display: flex;\n        flex-direction: column;\n    }\n    .middle8 {\n        display: flex;\n        flex-direction: row;\n        align-items: center;\n        justify-content: space-between;\n    }\n    .middle8text {\n        max-width: 58%;\n        text-align: justify;\n    }\n    .bottom8 {\n        margin-bottom: 25px;\n    }\n    .step9 {\n        min-height: 250px;\n        font-family: 'Helvetica Neue';\n        display: flex;\n        flex-direction: column;\n    }\n    .middle9 {\n        display: flex;\n        flex-direction: row;\n        align-items: center;\n        justify-content: space-between;\n    }\n    .middle9text {\n        /* max-width: 58%; */\n        text-align: justify;\n    }\n    .bottom9 {\n        margin-bottom: 25px;\n    }\n</style>\n\n",
    "<script>\n    import { onDestroy } from 'svelte';\n\timport Stopwatch from './Stopwatch.svelte';\n\timport Laps from './Laps.svelte';\n\timport Controls from './Controls.svelte';\n\n\t// import the number of milliseconds from the readable stores\n\timport { time } from './stores.js';\n\n    // lapse is set to consider the time since the start button is first pressed\n    let lapse = 0;\n\t// previous is set to record the time accumulated before the pause button is pressed\n    let previous = 0;\n\n    // unsubscribe is set to refer to the function used to unsubscribe from the store\n    let unsubscribe;\n\n    // through the start function pair the lapse variable to the time retrieved from the readable store\n    function start() {\n        // assign the stop function to unsubscribe\n        unsubscribe = time.subscribe(value => {\n            // add the previous value to the current number of milliseconds\n            lapse = value + previous;\n        });\n    }\n\n    // through the terminate function unsubscribe from the readable store\n    function terminate() {\n        // check if unsubscribe is truthy (this to cover the situation in which the stop button is pressed after the pause button)\n        if (unsubscribe) {\n            unsubscribe();\n            unsubscribe = null;\n        }\n    }\n\n    // through the stop function unsubscribe from the readable store and reset the values\n    function stop() {\n        lapse = 0;\n        previous = 0;\n\n        laps = [];\n        terminate();\n    }\n\n    // through the pause function unsubscribe from the store and set previous to match the value held by lapse\n    function pause() {\n        previous = lapse;\n        terminate();\n\t}\n\n    // describe the booleans to determine the button(s) included in the controls component\n    // subscription refers to the state in which the start button has been pressed\n    // here the subscription is ongoing and the unsubscribe variable holds a truthy value\n    $:subscription = !!unsubscribe;\n    // lapsed refers to the state in which the subscription  has started and lapse holds a value greater than 0\n    $:lapsed = !!lapse;\n\n\t// laps refers to an array describing the number of milliseconds after each lap\n\tlet laps = [];\n\n    // through the lap function include an object specifying the total and partial number of milliseconds\n    function lap() {\n        const { length } = laps;\n        const total = lapse;\n        // partial referring to the number of milliseconds between the previous (if existing) and current lap\n        const partial = length > 0 ? total - laps[0].total : total;\n        laps = [{\n            number: length + 1,\n            total,\n            partial,\n        }, ...laps];\n    }\n\n    // unsubscribe from the store to avoid memory leaks\n    onDestroy(() => {\n        terminate();\n    });\n\n</script>\n<style>\n\t/* global styles which would otherwise be placed in the global stylesheet */\n\n\t@import url(\"https://fonts.googleapis.com/css?family=Roboto+Mono:300|Open+Sans:400&display=swap\");\n\n\t:global(*) {\n\t\t\tbox-sizing: border-box;\n\t\t\tpadding: 0;\n\t\t\tmargin: 0;\n\t}\n\n\t:global(body) {\n\t\t\t/* background: hsl(0, 0%, 95%); */\n\t\t\tcolor: hsl(0, 0%, 20%);\n\t\t\tfont-family: \"Open Sans\", sans-serif;\n\t\t\t/* center the .stopwatch container in the viewport */\n\t\t\tdisplay: flex;\n\t\t\tflex-direction: column;\n\t\t\tjustify-content: center;\n\t\t\talign-items: center;\n\t\t\t/* min-height: 100vh; */\n\t}\n\t\n\t/* display the content of the .stopwatch container in a column */\n\t:global(.stopwatch) {\n\t\t\tdisplay: flex;\n\t\t\tflex-direction: column;\n\t\t\tmargin-top: 150px;\n\t}\n\t:global(.stopwatch > * + *) {\n\t\t\tmargin-top: 0.75rem;\n\t}\n\t\n\t/* for devices supporting css grid */\n\t@supports (display: grid) {\n\t\t\t/* for larger viewports */\n\t\t\t@media (min-width: 600px) {\n\t\t\t\t\t/* display the svg, ul and .controls in a grid\n\n\t\t\t\t|   svg  |  ul           |\n\t\t\t\t|   svg  |   .controls   |\n\t\t\t*/\n\t\t\t\t\t:global(.stopwatch) {\n\t\t\t\t\t\t\tdisplay: grid;\n\t\t\t\t\t\t\tgrid-gap: 20px 50px;\n\t\t\t\t\t\t\tgrid-template-columns: 300px 250px;\n\t\t\t\t\t\t\tgrid-template-rows: 225px auto;\n\t\t\t\t\t\t\tgrid-template-areas: \"watch list\" \"watch controls\";\n\t\t\t\t\t\t\tjustify-content: space-between;\n\t\t\t\t\t}\n\t\t\t\t\t:global(.stopwatch svg) {\n\t\t\t\t\t\t\tgrid-area: watch;\n\t\t\t\t\t\t\talign-self: center;\n\t\t\t\t\t}\n\t\t\t\t\t:global(.stopwatch ul) {\n\t\t\t\t\t\t\tgrid-area: list;\n\t\t\t\t\t}\n\t\t\t\t\t:global(.stopwatch .controls) {\n\t\t\t\t\t\t\tgrid-area: controls;\n\t\t\t\t\t\t\talign-self: center;\n\t\t\t\t\t}\n\t\t\t\t\t:global(.stopwatch > * + *) {\n\t\t\t\t\t\t\tmargin-top: 0;\n\t\t\t\t\t}\n\t\t\t}\n\t}\n\n</style>\n\n<div class=\"stopwatch\">\n    <!-- pass the number of milliseconds to the stopwatch component -->\n    <Stopwatch {lapse} />\n    <!-- pass the array of laps to the laps component -->\n    <Laps {laps} />\n    <!-- following the events disaptched from the controls component call the start/pause/stop/lap function\n    pass the necessary booleans to display the correct button(s)\n    -->\n\t<Controls on:start={start} on:stop={stop} on:pause={pause} on:lap={lap} {subscription} {lapsed} />\n</div>\n",
    "<script>\n    // dispatch start/stop/pause/lap events following a click on the button\n    import { createEventDispatcher } from \"svelte\";\n    const dispatch = createEventDispatcher();\n\n    // following a click on the buttons dispatch the matching events\n    function start() {\n        dispatch(\"start\");\n    }\n    function stop() {\n        dispatch(\"stop\");\n    }\n    function pause() {\n        dispatch(\"pause\");\n    }\n    function lap() {\n        dispatch(\"lap\");\n    }\n\n    // consider the booleans passed down from App.svelte\n    export let subscription;\n    export let lapsed;\n</script>\n<style>\n    /* display the button(s) in a row */\n    div {\n        display: flex;\n        border: 1px solid hsl(0, 0%, 25%);\n        border-radius: 20px;\n    }\n    div button {\n        font-size: 0.9rem;\n        color: hsl(0, 0%, 10%);\n        font-family: inherit;\n        padding: 0.5rem;\n        flex-grow: 1;\n        width: 0;\n        border: none;\n        background: none;\n        border-radius: inherit;\n        margin: 0; /* by default svelte applies a margin to the bottom of the button */\n        transition: background 0.2s ease-out;\n    }\n    /* include a border on all button but the first, to avoid a border when only one element exist */\n    div button:not(:first-of-type) {\n        border-left: 1px solid hsl(0, 0%, 25%);\n        border-top-left-radius: 0;\n        border-bottom-left-radius: 0;\n    }\n\n    div button:focus {\n        outline-color: hsl(0, 0%, 25%);\n    }\n    div button:hover {\n        background: hsl(0, 0%, 92%);\n    }\n</style>\n\n<!-- depending on the value of subscription and lapsed display different controls\nsubscription -> Lap & pause\n    otherwise, lapsed -> Reset & continue\n        otherwiose -> Start\n-->\n<div class=\"controls\">\n    {#if subscription}\n    <button on:click=\"{lap}\">Lap</button>\n    <button on:click=\"{pause}\">Pause</button>\n    {:else if lapsed}\n    <button on:click=\"{stop}\">Reset</button>\n    <button on:click=\"{start}\">Continue</button>\n    {:else}\n    <button on:click=\"{start}\">Start</button>\n    {/if}\n</div>\n",
    "<script>\n    // import fly to introduce new list items from the top\n    import { fly } from \"svelte/transition\";\n    // import flip to animate the remaining list items toward their new position\n    import { flip } from \"svelte/animate\";\n\n    import { formatTime } from \"./utils.js\";\n\n    export let laps = [];\n</script>\n<style>\n    /* limit the height of the unordered list */\n    ul {\n        list-style: none;\n        height: 200px;\n        overflow-y: auto;\n        padding: 0 0.5rem; /* horizontal padding included for the scrollbar */\n    }\n    /* display each list item in a row */\n    ul li {\n        display: flex;\n        align-items: center;\n        border-bottom: 1px solid hsl(0, 0%, 70%);\n        padding: 0.75rem 0;\n    }\n    ul > li + li {\n        margin-top: 1rem;\n    }\n    /* separate the space of each row equally among the direct children (the h2, h3 and h4 elements */\n    ul li > * {\n        font-weight: 400;\n        width: 0;\n        flex-grow: 1;\n    }\n    ul li h2 {\n        text-align: left;\n        font-size: 1rem;\n    }\n    ul li h2 sup {\n        font-size: 0.75rem;\n        margin-left: -0.25rem;\n    }\n    ul li h3 {\n        text-align: center;\n        font-size: 1.15rem;\n    }\n    ul li h4 {\n        text-align: right;\n        font-size: 0.75rem;\n    }\n\t\n\t\t/* for -webkit supported browsers style the scrollbar closer to the overall ui */\n\t\tul::-webkit-scrollbar {\n\t\t\t\twidth: 6px;\n\t\t}\n\t\tul::-webkit-scrollbar-track {\n\t\t\t\tborder-radius: 3px;\n\t\t\t\tbackground: hsl(0, 0%, 80%);\n\t\t}\n\t\tul::-webkit-scrollbar-thumb {\n\t\t\t\tbackground-color: hsl(0, 0%, 30%);\n\t\t\t\tborder-radius: 3px;\n\t\t}\n</style>\n\n<!-- use lap.total as a unique key to differentiate between the items -->\n<ul>\n    {#each laps as lap (lap.total)}\n    <li in:fly=\"{{ y: -20, duration: 300, delay: 50 }}\" animate:flip=\"{{ duration: 350 }}\">\n        <h2>Lap <sup>{lap.number}</sup></h2>\n        <h3>{formatTime(lap.total)}</h3>\n        <h4>+{formatTime(lap.partial)}</h4>\n    </li>\n    {/each}\n</ul>\n",
    "<script>\n    import { formatTime } from \"./utils.js\";\n    import { tweened } from \"svelte/motion\";\n\n    // lapse refers to the number of milliseconds in the stopwatch\n    export let lapse = 0;\n\n    // rotation refers to the degrees applied to the minutes dial to have a full rotation for 60 seconds\n    // multiply the value by 60 for the seconds dial to have a full rotation every second\n    $: rotation = ((lapse / 1000 / 60) * 360) % 360;\n\n    // this is a very imperfect way to have the dials rotate smoothly back to 0\n    // set a transition on the minutes and seconds dial, but only when lapse is set to 0\n    // remove it when lapse is then more than 0\n    let seconds;\n    let minutes;\n    // to avoid constantly setting transition to none add a boolean to short-circuit the second conditional\n    let transitioned;\n\n    // minutes and seconds are undefined by default\n    $: if (!lapse && minutes && seconds) {\n        minutes.style.transition = \"transform 0.2s ease-in-out\";\n        seconds.style.transition = \"transform 0.2s ease-in-out\";\n        transitioned = false;\n    }\n    $: if (lapse && !transitioned) {\n        minutes.style.transition = \"none\";\n        seconds.style.transition = \"none\";\n        transitioned = true;\n    }\n</script>\n\n<style>\n    svg {\n        font-family: \"Roboto Mono\", monospace;\n        color: hsl(0, 0%, 5%);\n    }\n</style>\n<svg viewBox=\"0 0 100 100\" width=\"300\" height=\"300\">\n    <g transform=\"translate(50 50)\">\n        <circle id=\"dial\" cx=\"0\" cy=\"0\" r=\"42\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"5\" stroke-dasharray=\"0.3 1.898\"></circle>\n        <use href=\"#dial\" transform=\"scale(-1 1)\"></use>\n\n        <!-- include the number of milliseconds in the rotation of the minutes dial\n        1 full rotation for every 60 seconds\n        -->\n        <g bind:this=\"{minutes}\" transform=\"rotate({rotation})\">\n            <g transform=\"translate(0 -50)\">\n                <path d=\"M -2.25 0 h 4.5 l -2.25 2.5 l -2.25 -2.5\" fill=\"currentColor\" stroke=\"currentColor\" stroke-width=\"1\" stroke-linejoin=\"round\" stroke-linecap=\"round\"></path>\n            </g>\n        </g>\n\n        <g transform=\"translate(0 20)\">\n            <!-- include the number of milliseconds in the rotation of the minutes dial\n            1 full rotation for every single second\n            -->\n            <g bind:this=\"{seconds}\" transform=\"rotate({(rotation * 60) % 360})\">\n                <path d=\"M 0 -1 v -4.5\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"0.4\" stroke-linejoin=\"round\" stroke-linecap=\"round\"></path>\n            </g>\n            <circle r=\"7\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"0.4\"></circle>\n            <circle r=\"1\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"0.4\"></circle>\n        </g>\n\n        <text text-anchor=\"middle\" fill=\"currentColor\" dominant-baseline=\"middle\" font-size=\"10\" style=\"font-weight: 300; letter-spacing: 1px;\">\n            {formatTime(lapse)}\n        </text>\n    </g>\n</svg>\n"
  ],
  "names": [],
  "mappings": "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"
}